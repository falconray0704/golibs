// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	logging "github.com/qdm12/golibs/logging"
	mock "github.com/stretchr/testify/mock"

	params "github.com/qdm12/golibs/params"

	time "time"

	url "net/url"
)

// EnvParams is an autogenerated mock type for the EnvParams type
type EnvParams struct {
	mock.Mock
}

// GetDatabaseDetails provides a mock function with given fields:
func (_m *EnvParams) GetDatabaseDetails() (string, string, string, string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func() string); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 string
	if rf, ok := ret.Get(3).(func() string); ok {
		r3 = rf()
	} else {
		r3 = ret.Get(3).(string)
	}

	var r4 error
	if rf, ok := ret.Get(4).(func() error); ok {
		r4 = rf()
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// GetDuration provides a mock function with given fields: key, timeUnit, setters
func (_m *EnvParams) GetDuration(key string, timeUnit time.Duration, setters ...params.GetEnvSetter) (time.Duration, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key, timeUnit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(string, time.Duration, ...params.GetEnvSetter) time.Duration); ok {
		r0 = rf(key, timeUnit, setters...)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Duration, ...params.GetEnvSetter) error); ok {
		r1 = rf(key, timeUnit, setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnv provides a mock function with given fields: key, setters
func (_m *EnvParams) GetEnv(key string, setters ...params.GetEnvSetter) (string, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...params.GetEnvSetter) string); ok {
		r0 = rf(key, setters...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...params.GetEnvSetter) error); ok {
		r1 = rf(key, setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvInt provides a mock function with given fields: key, setters
func (_m *EnvParams) GetEnvInt(key string, setters ...params.GetEnvSetter) (int, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, ...params.GetEnvSetter) int); ok {
		r0 = rf(key, setters...)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...params.GetEnvSetter) error); ok {
		r1 = rf(key, setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvIntRange provides a mock function with given fields: key, lower, upper, setters
func (_m *EnvParams) GetEnvIntRange(key string, lower int, upper int, setters ...params.GetEnvSetter) (int, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key, lower, upper)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, int, int, ...params.GetEnvSetter) int); ok {
		r0 = rf(key, lower, upper, setters...)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int, ...params.GetEnvSetter) error); ok {
		r1 = rf(key, lower, upper, setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExeDir provides a mock function with given fields:
func (_m *EnvParams) GetExeDir() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGotifyToken provides a mock function with given fields: setters
func (_m *EnvParams) GetGotifyToken(setters ...params.GetEnvSetter) (string, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...params.GetEnvSetter) string); ok {
		r0 = rf(setters...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...params.GetEnvSetter) error); ok {
		r1 = rf(setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGotifyURL provides a mock function with given fields: setters
func (_m *EnvParams) GetGotifyURL(setters ...params.GetEnvSetter) (*url.URL, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func(...params.GetEnvSetter) *url.URL); ok {
		r0 = rf(setters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...params.GetEnvSetter) error); ok {
		r1 = rf(setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupID provides a mock function with given fields:
func (_m *EnvParams) GetGroupID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetHTTPTimeout provides a mock function with given fields: timeUnit, setters
func (_m *EnvParams) GetHTTPTimeout(timeUnit time.Duration, setters ...params.GetEnvSetter) (time.Duration, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, timeUnit)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(time.Duration, ...params.GetEnvSetter) time.Duration); ok {
		r0 = rf(timeUnit, setters...)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Duration, ...params.GetEnvSetter) error); ok {
		r1 = rf(timeUnit, setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListeningPort provides a mock function with given fields: setters
func (_m *EnvParams) GetListeningPort(setters ...params.GetEnvSetter) (string, string, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...params.GetEnvSetter) string); ok {
		r0 = rf(setters...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(...params.GetEnvSetter) string); ok {
		r1 = rf(setters...)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(...params.GetEnvSetter) error); ok {
		r2 = rf(setters...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetLoggerConfig provides a mock function with given fields:
func (_m *EnvParams) GetLoggerConfig() (logging.Encoding, logging.Level, int, error) {
	ret := _m.Called()

	var r0 logging.Encoding
	if rf, ok := ret.Get(0).(func() logging.Encoding); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(logging.Encoding)
	}

	var r1 logging.Level
	if rf, ok := ret.Get(1).(func() logging.Level); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(logging.Level)
	}

	var r2 int
	if rf, ok := ret.Get(2).(func() int); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(int)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func() error); ok {
		r3 = rf()
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetLoggerEncoding provides a mock function with given fields: setters
func (_m *EnvParams) GetLoggerEncoding(setters ...params.GetEnvSetter) (logging.Encoding, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 logging.Encoding
	if rf, ok := ret.Get(0).(func(...params.GetEnvSetter) logging.Encoding); ok {
		r0 = rf(setters...)
	} else {
		r0 = ret.Get(0).(logging.Encoding)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...params.GetEnvSetter) error); ok {
		r1 = rf(setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoggerLevel provides a mock function with given fields: setters
func (_m *EnvParams) GetLoggerLevel(setters ...params.GetEnvSetter) (logging.Level, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 logging.Level
	if rf, ok := ret.Get(0).(func(...params.GetEnvSetter) logging.Level); ok {
		r0 = rf(setters...)
	} else {
		r0 = ret.Get(0).(logging.Level)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...params.GetEnvSetter) error); ok {
		r1 = rf(setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeID provides a mock function with given fields: setters
func (_m *EnvParams) GetNodeID(setters ...params.GetEnvSetter) (int, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 int
	if rf, ok := ret.Get(0).(func(...params.GetEnvSetter) int); ok {
		r0 = rf(setters...)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...params.GetEnvSetter) error); ok {
		r1 = rf(setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOnOff provides a mock function with given fields: key, setters
func (_m *EnvParams) GetOnOff(key string, setters ...params.GetEnvSetter) (bool, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, ...params.GetEnvSetter) bool); ok {
		r0 = rf(key, setters...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...params.GetEnvSetter) error); ok {
		r1 = rf(key, setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPath provides a mock function with given fields: key, setters
func (_m *EnvParams) GetPath(key string, setters ...params.GetEnvSetter) (string, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...params.GetEnvSetter) string); ok {
		r0 = rf(key, setters...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...params.GetEnvSetter) error); ok {
		r1 = rf(key, setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRedisDetails provides a mock function with given fields:
func (_m *EnvParams) GetRedisDetails() (string, string, string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func() string); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func() string); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func() error); ok {
		r3 = rf()
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// GetRootURL provides a mock function with given fields: setters
func (_m *EnvParams) GetRootURL(setters ...params.GetEnvSetter) (string, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(...params.GetEnvSetter) string); ok {
		r0 = rf(setters...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...params.GetEnvSetter) error); ok {
		r1 = rf(setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetURL provides a mock function with given fields: key, setters
func (_m *EnvParams) GetURL(key string, setters ...params.GetEnvSetter) (*url.URL, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func(string, ...params.GetEnvSetter) *url.URL); ok {
		r0 = rf(key, setters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...params.GetEnvSetter) error); ok {
		r1 = rf(key, setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserID provides a mock function with given fields:
func (_m *EnvParams) GetUserID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetValueIfInside provides a mock function with given fields: key, possibilities, setters
func (_m *EnvParams) GetValueIfInside(key string, possibilities []string, setters ...params.GetEnvSetter) (string, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key, possibilities)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []string, ...params.GetEnvSetter) string); ok {
		r0 = rf(key, possibilities, setters...)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string, ...params.GetEnvSetter) error); ok {
		r1 = rf(key, possibilities, setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetYesNo provides a mock function with given fields: key, setters
func (_m *EnvParams) GetYesNo(key string, setters ...params.GetEnvSetter) (bool, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, ...params.GetEnvSetter) bool); ok {
		r0 = rf(key, setters...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...params.GetEnvSetter) error); ok {
		r1 = rf(key, setters...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
