// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// FileManager is an autogenerated mock type for the FileManager type
type FileManager struct {
	mock.Mock
}

// DirectoryExists provides a mock function with given fields: filePath
func (_m *FileManager) DirectoryExists(filePath string) (bool, error) {
	ret := _m.Called(filePath)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileExists provides a mock function with given fields: filePath
func (_m *FileManager) FileExists(filePath string) (bool, error) {
	ret := _m.Called(filePath)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilepathExists provides a mock function with given fields: filePath
func (_m *FileManager) FilepathExists(filePath string) (bool, error) {
	ret := _m.Called(filePath)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOwnership provides a mock function with given fields: filePath
func (_m *FileManager) GetOwnership(filePath string) (int, int, error) {
	ret := _m.Called(filePath)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string) int); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(filePath)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserPermissions provides a mock function with given fields: filePath
func (_m *FileManager) GetUserPermissions(filePath string) (bool, bool, bool, error) {
	ret := _m.Called(filePath)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(string) bool); ok {
		r2 = rf(filePath)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string) error); ok {
		r3 = rf(filePath)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ReadFile provides a mock function with given fields: filePath
func (_m *FileManager) ReadFile(filePath string) ([]byte, error) {
	ret := _m.Called(filePath)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Touch provides a mock function with given fields: filePath
func (_m *FileManager) Touch(filePath string) error {
	ret := _m.Called(filePath)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(filePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteLinesToFile provides a mock function with given fields: filePath, lines
func (_m *FileManager) WriteLinesToFile(filePath string, lines []string) error {
	ret := _m.Called(filePath, lines)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(filePath, lines)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteToFile provides a mock function with given fields: filePath, data
func (_m *FileManager) WriteToFile(filePath string, data []byte) error {
	ret := _m.Called(filePath, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(filePath, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
