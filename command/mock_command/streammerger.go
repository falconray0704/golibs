// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/golibs/command (interfaces: StreamMerger)

// Package mock_command is a generated GoMock package.
package mock_command

import (
	gomock "github.com/golang/mock/gomock"
	command "github.com/qdm12/golibs/command"
	io "io"
	reflect "reflect"
)

// MockStreamMerger is a mock of StreamMerger interface
type MockStreamMerger struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMergerMockRecorder
}

// MockStreamMergerMockRecorder is the mock recorder for MockStreamMerger
type MockStreamMergerMockRecorder struct {
	mock *MockStreamMerger
}

// NewMockStreamMerger creates a new mock instance
func NewMockStreamMerger(ctrl *gomock.Controller) *MockStreamMerger {
	mock := &MockStreamMerger{ctrl: ctrl}
	mock.recorder = &MockStreamMergerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamMerger) EXPECT() *MockStreamMergerMockRecorder {
	return m.recorder
}

// CollectLines mocks base method
func (m *MockStreamMerger) CollectLines(arg0 func(string)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectLines", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CollectLines indicates an expected call of CollectLines
func (mr *MockStreamMergerMockRecorder) CollectLines(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectLines", reflect.TypeOf((*MockStreamMerger)(nil).CollectLines), arg0)
}

// Merge mocks base method
func (m *MockStreamMerger) Merge(arg0 io.ReadCloser, arg1 ...command.MergeOptionSetter) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Merge", varargs...)
}

// Merge indicates an expected call of Merge
func (mr *MockStreamMergerMockRecorder) Merge(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Merge", reflect.TypeOf((*MockStreamMerger)(nil).Merge), varargs...)
}
