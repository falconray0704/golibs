// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/golibs/command (interfaces: Waiter)

// Package mock_command is a generated GoMock package.
package mock_command

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWaiter is a mock of Waiter interface
type MockWaiter struct {
	ctrl     *gomock.Controller
	recorder *MockWaiterMockRecorder
}

// MockWaiterMockRecorder is the mock recorder for MockWaiter
type MockWaiterMockRecorder struct {
	mock *MockWaiter
}

// NewMockWaiter creates a new mock instance
func NewMockWaiter(ctrl *gomock.Controller) *MockWaiter {
	mock := &MockWaiter{ctrl: ctrl}
	mock.recorder = &MockWaiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWaiter) EXPECT() *MockWaiterMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockWaiter) Add(arg0 func() error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add
func (mr *MockWaiterMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockWaiter)(nil).Add), arg0)
}

// WaitForAll mocks base method
func (m *MockWaiter) WaitForAll(arg0 context.Context) []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForAll", arg0)
	ret0, _ := ret[0].([]error)
	return ret0
}

// WaitForAll indicates an expected call of WaitForAll
func (mr *MockWaiterMockRecorder) WaitForAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForAll", reflect.TypeOf((*MockWaiter)(nil).WaitForAll), arg0)
}
