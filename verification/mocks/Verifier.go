// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Verifier is an autogenerated mock type for the Verifier type
type Verifier struct {
	mock.Mock
}

// Match64BytesHex provides a mock function with given fields: s
func (_m *Verifier) Match64BytesHex(s string) bool {
	ret := _m.Called(s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MatchDomain provides a mock function with given fields: s
func (_m *Verifier) MatchDomain(s string) bool {
	ret := _m.Called(s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MatchEmail provides a mock function with given fields: s
func (_m *Verifier) MatchEmail(s string) bool {
	ret := _m.Called(s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MatchHostname provides a mock function with given fields: s
func (_m *Verifier) MatchHostname(s string) bool {
	ret := _m.Called(s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MatchMD5String provides a mock function with given fields: s
func (_m *Verifier) MatchMD5String(s string) bool {
	ret := _m.Called(s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MatchPhoneIntl provides a mock function with given fields: s
func (_m *Verifier) MatchPhoneIntl(s string) bool {
	ret := _m.Called(s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MatchPhoneLocal provides a mock function with given fields: s
func (_m *Verifier) MatchPhoneLocal(s string) bool {
	ret := _m.Called(s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MatchRootURL provides a mock function with given fields: s
func (_m *Verifier) MatchRootURL(s string) bool {
	ret := _m.Called(s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SearchEmail provides a mock function with given fields: s
func (_m *Verifier) SearchEmail(s string) []string {
	ret := _m.Called(s)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SearchIPv4 provides a mock function with given fields: s
func (_m *Verifier) SearchIPv4(s string) []string {
	ret := _m.Called(s)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SearchIPv6 provides a mock function with given fields: s
func (_m *Verifier) SearchIPv6(s string) []string {
	ret := _m.Called(s)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// SearchPhone provides a mock function with given fields: s
func (_m *Verifier) SearchPhone(s string) []string {
	ret := _m.Called(s)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// ValidateEmail provides a mock function with given fields: email
func (_m *Verifier) ValidateEmail(email string) error {
	ret := _m.Called(email)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyPort provides a mock function with given fields: port
func (_m *Verifier) VerifyPort(port string) error {
	ret := _m.Called(port)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
