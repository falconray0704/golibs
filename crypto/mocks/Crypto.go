// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Crypto is an autogenerated mock type for the Crypto type
type Crypto struct {
	mock.Mock
}

// Checksumize provides a mock function with given fields: data
func (_m *Crypto) Checksumize(data []byte) ([]byte, error) {
	ret := _m.Called(data)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dechecksumize provides a mock function with given fields: checksumData
func (_m *Crypto) Dechecksumize(checksumData []byte) ([]byte, error) {
	ret := _m.Called(checksumData)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte) []byte); ok {
		r0 = rf(checksumData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(checksumData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecryptAES256 provides a mock function with given fields: ciphertext, key
func (_m *Crypto) DecryptAES256(ciphertext []byte, key [32]byte) ([]byte, error) {
	ret := _m.Called(ciphertext, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, [32]byte) []byte); ok {
		r0 = rf(ciphertext, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, [32]byte) error); ok {
		r1 = rf(ciphertext, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EncryptAES256 provides a mock function with given fields: plaintext, key
func (_m *Crypto) EncryptAES256(plaintext []byte, key [32]byte) ([]byte, error) {
	ret := _m.Called(plaintext, key)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, [32]byte) []byte); ok {
		r0 = rf(plaintext, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, [32]byte) error); ok {
		r1 = rf(plaintext, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSalt provides a mock function with given fields:
func (_m *Crypto) NewSalt() ([32]byte, error) {
	ret := _m.Called()

	var r0 [32]byte
	if rf, ok := ret.Get(0).(func() [32]byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShakeSum256 provides a mock function with given fields: data
func (_m *Crypto) ShakeSum256(data []byte) ([64]byte, error) {
	ret := _m.Called(data)

	var r0 [64]byte
	if rf, ok := ret.Get(0).(func([]byte) [64]byte); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([64]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SignEd25519 provides a mock function with given fields: message, signingKey
func (_m *Crypto) SignEd25519(message []byte, signingKey [64]byte) []byte {
	ret := _m.Called(message, signingKey)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, [64]byte) []byte); ok {
		r0 = rf(message, signingKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}
