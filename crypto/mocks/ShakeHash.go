// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	sha3 "golang.org/x/crypto/sha3"
)

// ShakeHash is an autogenerated mock type for the ShakeHash type
type ShakeHash struct {
	mock.Mock
}

// Clone provides a mock function with given fields:
func (_m *ShakeHash) Clone() sha3.ShakeHash {
	ret := _m.Called()

	var r0 sha3.ShakeHash
	if rf, ok := ret.Get(0).(func() sha3.ShakeHash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sha3.ShakeHash)
		}
	}

	return r0
}

// Read provides a mock function with given fields: p
func (_m *ShakeHash) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reset provides a mock function with given fields:
func (_m *ShakeHash) Reset() {
	_m.Called()
}

// Write provides a mock function with given fields: p
func (_m *ShakeHash) Write(p []byte) (int, error) {
	ret := _m.Called(p)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
