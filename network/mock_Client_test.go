// Code generated by mockery v1.0.0. DO NOT EDIT.

package network

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockClient) Close() {
	_m.Called()
}

// DoHTTPRequest provides a mock function with given fields: request
func (_m *MockClient) DoHTTPRequest(request *http.Request) (int, []byte, error) {
	ret := _m.Called(request)

	var r0 int
	if rf, ok := ret.Get(0).(func(*http.Request) int); ok {
		r0 = rf(request)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []byte
	if rf, ok := ret.Get(1).(func(*http.Request) []byte); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*http.Request) error); ok {
		r2 = rf(request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetContent provides a mock function with given fields: URL, setters
func (_m *MockClient) GetContent(URL string, setters ...GetContentSetter) ([]byte, int, error) {
	_va := make([]interface{}, len(setters))
	for _i := range setters {
		_va[_i] = setters[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, URL)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string, ...GetContentSetter) []byte); ok {
		r0 = rf(URL, setters...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, ...GetContentSetter) int); ok {
		r1 = rf(URL, setters...)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, ...GetContentSetter) error); ok {
		r2 = rf(URL, setters...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
