// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/qdm12/golibs/network (interfaces: IPManager)

// Package mock_network is a generated GoMock package.
package mock_network

import (
	gomock "github.com/golang/mock/gomock"
	network "github.com/qdm12/golibs/network"
	http "net/http"
	reflect "reflect"
)

// MockIPManager is a mock of IPManager interface
type MockIPManager struct {
	ctrl     *gomock.Controller
	recorder *MockIPManagerMockRecorder
}

// MockIPManagerMockRecorder is the mock recorder for MockIPManager
type MockIPManagerMockRecorder struct {
	mock *MockIPManager
}

// NewMockIPManager creates a new mock instance
func NewMockIPManager(ctrl *gomock.Controller) *MockIPManager {
	mock := &MockIPManager{ctrl: ctrl}
	mock.recorder = &MockIPManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIPManager) EXPECT() *MockIPManagerMockRecorder {
	return m.recorder
}

// GetClientIP mocks base method
func (m *MockIPManager) GetClientIP(arg0 *http.Request) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientIP", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientIP indicates an expected call of GetClientIP
func (mr *MockIPManagerMockRecorder) GetClientIP(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientIP", reflect.TypeOf((*MockIPManager)(nil).GetClientIP), arg0)
}

// GetClientIPHeaders mocks base method
func (m *MockIPManager) GetClientIPHeaders(arg0 *http.Request) network.IPHeaders {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientIPHeaders", arg0)
	ret0, _ := ret[0].(network.IPHeaders)
	return ret0
}

// GetClientIPHeaders indicates an expected call of GetClientIPHeaders
func (mr *MockIPManagerMockRecorder) GetClientIPHeaders(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientIPHeaders", reflect.TypeOf((*MockIPManager)(nil).GetClientIPHeaders), arg0)
}
